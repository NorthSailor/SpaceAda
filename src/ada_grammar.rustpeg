
use super::data_type;
use super::expression;
use super::statement;
use super::prototype;
use super::subprogram;
use super::parser;

pub compilation_unit -> Vec<parser::ASTNode>
    = root_node*

pub root_node -> parser::ASTNode
    = sp:subprogram { parser::ASTNode::Subprogram(sp) } /
      dec:subprogram_declaration { parser::ASTNode::Declaration(dec) }

pub subprogram_declaration -> subprogram::Declaration
    = p:prototype wh<";"> { subprogram::Declaration { prototype: p }}

pub subprogram -> subprogram::Subprogram
    = p:prototype wh<"is"> vars:var_declaration* wh<"begin"> smts:statement* wh<"end"> identifier wh<";"> {
        subprogram::Subprogram { prototype:p, variables:vars, body:smts }
    }

pub var_declaration -> subprogram::VarDeclaration
    = _ name:identifier wh<":"> dtype:data_type wh<";"> {
        subprogram::VarDeclaration { data_type:dtype, name:name }
    }

pub prototype -> prototype::Prototype
    = wh<"function"> name:identifier wh<"("> p:parameter_decl_list wh<")"> wh<"return"> rtype:data_type {
        prototype::Prototype { name:name, returns:Some(rtype), arguments:p }
    } /
    wh<"procedure"> name:identifier wh<"("> p:parameter_decl_list wh<")"> {
        prototype::Prototype { name:name, returns:None, arguments:p }
    } /
    wh<"procedure"> name:identifier {
        prototype::Prototype { name:name, returns:None, arguments:vec![] }
    }

pub parameter_decl_list -> Vec<prototype::ParameterDeclaration>
    = parameter_declaration ** wh<";">
pub parameter_declaration -> prototype::ParameterDeclaration
    = _ name:identifier wh<":"> dir:parameter_direction _ dtype:data_type _ {
            prototype::ParameterDeclaration { data_type:dtype, name:name, direction:dir } }

pub parameter_direction -> prototype::ParameterDirection
    = wh<"in"> wh<"out"> { prototype::ParameterDirection::InOut } / 
      wh<"in"> { prototype::ParameterDirection::In } /
      wh<"out"> { prototype::ParameterDirection::Out }

pub statement -> statement::Statement
    = return_stmt / assignment_stmt / procedure_call_stmt

pub assignment_stmt -> statement::Statement
    = _ dest:identifier wh<":="> val:expression wh<";"> { statement::Statement::Assignment(dest, val) }

pub return_stmt -> statement::Statement
    = wh<"return"> val:expression? wh<";"> { statement::Statement::Return(val) }

pub procedure_call_stmt -> statement::Statement
    = _ name:identifier _ "(" params:parameter_list ")" wh<";"> { statement::Statement::ProcedureCall(name, params) } /
      _ name:identifier wh<";"> { statement::Statement::ProcedureCall(name, vec![]) }

pub expression -> expression::Expression
    = binary_expr / terminal_expr

pub function_call_expr -> expression::Expression
    = name:identifier _ "(" params:parameter_list ")" { expression::Expression::FunctionCall(name, params) }

pub parameter_list -> Vec<expression::Expression>
    = expression ** wh<",">

pub binary_expr -> expression::Expression = #infix<terminal_expr> {
	#L x "+" y { expression::Expression::Binary("+".to_string(), Box::new(x), Box::new(y)) }
	   x "-" y { expression::Expression::Binary("-".to_string(), Box::new(x), Box::new(y)) }
	#L x "*" y { expression::Expression::Binary("*".to_string(), Box::new(x), Box::new(y)) }
	   x "/" y { expression::Expression::Binary("/".to_string(), Box::new(x), Box::new(y)) }
}

pub enclosed_expr -> expression::Expression
    = wh<"("> x:expression wh<")"> { x }

pub terminal_expr -> expression::Expression
    = _ n:function_call_expr _  { n } /
        enclosed_expr / 
      _ x:float_value _ { expression::Expression::FloatValue(x) } /
      _ x:int_value _ { expression::Expression::IntValue(x) } /
      _ x:identifier _ { expression::Expression::Variable(x) }

pub int_value -> i32
    = n:$("-"? [0-9]+) { n.parse().unwrap() }

pub float_value -> f32
    = n:$("-"? [0-9]* "." [0-9]+) { n.parse().unwrap() }

pub identifier -> String
    = s:$(#quiet<[a-zA-Z][_a-zA-Z0-9]*>) { s.to_string() } / #expected("identifier")

pub data_type -> data_type::DataType
    = #quiet<"Integer"> { data_type::DataType::Integer } /
      #quiet<"Float"> { data_type::DataType::Float } / #expected("a data type")

wh<X> = _ X _

_ = #quiet<ignored>*
ignored = " " / "\n" / "\t" 
